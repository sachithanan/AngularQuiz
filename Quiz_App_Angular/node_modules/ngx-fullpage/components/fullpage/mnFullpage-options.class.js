var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/**
 * @author Meiblorn (Vadim Fedorenko) <meiblorn@gmail.com | admin@meiblorn.com> on 15/05/16.
 */
import { Injectable } from '@angular/core';
var MnFullpageOptions = /** @class */ (function () {
    function MnFullpageOptions() {
        /**
         *  This option is compulsory.** If you use fullPage in a non open source project,
         *  then you should use the license key provided on the purchase of the fullPage Commercial License.
         *  Otherwise, you can use the string `OPEN-SOURCE-GPLV3-LICENSE`. Please read more about licenses
         * [here](https://github.com/alvarotrigo/fullPage.js#license) and [on the website](https://alvarotrigo.com/fullPage/pricing/)
         */
        this.licenseKey = 'OPEN-SOURCE-GPLV3-LICENSE';
    }
    MnFullpageOptions_1 = MnFullpageOptions;
    /**
     * Public factory method
     *
     * @param options options js-object
     */
    MnFullpageOptions.create = function (options) {
        var fullpageOptions = new MnFullpageOptions_1();
        if (options) {
            Object.assign(fullpageOptions, options);
        }
        return fullpageOptions;
    };
    var MnFullpageOptions_1;
    MnFullpageOptions = MnFullpageOptions_1 = __decorate([
        Injectable()
    ], MnFullpageOptions);
    return MnFullpageOptions;
}());
export { MnFullpageOptions };
//# sourceMappingURL=mnFullpage-options.class.js.map